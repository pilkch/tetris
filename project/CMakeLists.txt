# Set the minimum cmake version
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

# Set the project name
PROJECT(tetris)

SET(CMAKE_SOURCE_DIR ./../../library/)
SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}cmake/")

SET(PROJECT_DIRECTORY "../")
SET(PROJECT_SRC "${PROJECT_DIRECTORY}src/")

SET(LIBRARY_INCLUDE "${CMAKE_SOURCE_DIR}include/")
SET(LIBRARY_SRC "${CMAKE_SOURCE_DIR}src/")

# Add definitions, compiler switches, etc.
ADD_DEFINITIONS("-Wall -W -Wextra -Werror -Wformat -Wformat-y2k -Winit-self -Wstack-protector -Wunknown-pragmas -Wundef -Wcast-qual -Wwrite-strings -Wno-unused-parameter -Wpointer-arith -Wno-switch -Woverloaded-virtual -Wno-stack-protector -Wmissing-include-dirs -Wuninitialized -Wc++0x-compat -std=c++0x -ffor-scope -O2")


ADD_DEFINITIONS("-DUNICODE -D_UNICODE")

IF("${CMAKE_SYSTEM}" MATCHES "Linux")
  ADD_DEFINITIONS("-D__LINUX__")
ENDIF()
IF(WIN32)
  ADD_DEFINITIONS("-DNOMINMAX")
ENDIF()

INCLUDE_DIRECTORIES(${LIBRARY_INCLUDE})


# Files from library directory

MACRO(PREFIX_PATHS SOURCE_DIRECTORY SOURCE_FILES)
MESSAGE(STATUS "PREFIX_PATHS dir=${SOURCE_DIRECTORY}, files=${SOURCE_FILES}, ${ARGN}")
MESSAGE(a=${SOURCE_FILES})
  SET(OUTPUT_FILES "")
  SET(a ${OUTPUT_FILES})
  SET(OUTPUT_FILES ${a} "${SOURCE_DIRECTORY}${SOURCE_FILES}")
  FOREACH(SOURCE_FILE ${ARGN})
    MESSAGE(b=${SOURCE_FILE})
    SET(a ${OUTPUT_FILES})
    SET(OUTPUT_FILES ${a} "${SOURCE_DIRECTORY}${SOURCE_FILE}")
  ENDFOREACH()
MESSAGE(d=${OUTPUT_FILES})
ENDMACRO(PREFIX_PATHS)




SET(LIBRARY_LIBVOODOOMM_SOURCE_DIRECTORY libvoodoomm/)
SET(LIBRARY_LIBVOODOOMM_SOURCE_FILES
libvoodoomm.cpp cImage.cpp)

IF(WIN32)
  SET(LIBRARY_LIBVOODOOMM_SOURCE_FILES ${LIBRARY_LIBVOODOOMM_SOURCE_FILES})
ENDIF()

PREFIX_PATHS(${LIBRARY_LIBVOODOOMM_SOURCE_DIRECTORY} ${LIBRARY_LIBVOODOOMM_SOURCE_FILES})
SET(OUTPUT_LIBRARY_LIBVOODOOMM_SOURCE_FILES ${OUTPUT_FILES})



SET(LIBRARY_LIBOPENGLMM_SOURCE_DIRECTORY libopenglmm/)
SET(LIBRARY_LIBOPENGLMM_SOURCE_FILES
libopenglmm.cpp cContext.cpp cGeometry.cpp cShader.cpp cSystem.cpp cTexture.cpp cVertexArray.cpp cVertexBufferObject.cpp cWindow.cpp)

IF(WIN32)
  SET(LIBRARY_LIBOPENGLMM_SOURCE_FILES ${LIBRARY_LIBOPENGLMM_SOURCE_FILES})
ENDIF()

PREFIX_PATHS(${LIBRARY_LIBOPENGLMM_SOURCE_DIRECTORY} ${LIBRARY_LIBOPENGLMM_SOURCE_FILES})
SET(OUTPUT_LIBRARY_LIBOPENGLMM_SOURCE_FILES ${OUTPUT_FILES})



SET(LIBRARY_SPITFIRE_SOURCE_DIRECTORY spitfire/)
SET(LIBRARY_SPITFIRE_SOURCE_FILES
math/cVec2.cpp math/cVec3.cpp math/cVec4.cpp math/cMat4.cpp math/cQuaternion.cpp math/math.cpp math/cColour.cpp)

IF(WIN32)
  SET(LIBRARY_SPITFIRE_SOURCE_FILES ${LIBRARY_SPITFIRE_SOURCE_FILES})
ENDIF()

PREFIX_PATHS(${LIBRARY_SPITFIRE_SOURCE_DIRECTORY} ${LIBRARY_SPITFIRE_SOURCE_FILES})
SET(OUTPUT_LIBRARY_SPITFIRE_SOURCE_FILES ${OUTPUT_FILES})



SET(LIBRARY_SOURCE_FILES ${OUTPUT_LIBRARY_SPITFIRE_SOURCE_FILES} ${OUTPUT_LIBRARY_BREATHE_SOURCE_FILES} ${OUTPUT_LIBRARY_LIBVOODOOMM_SOURCE_FILES} ${OUTPUT_LIBRARY_LIBOPENGLMM_SOURCE_FILES}
GL/GLee.cpp
)
PREFIX_PATHS(${LIBRARY_SRC} ${LIBRARY_SOURCE_FILES})
SET(OUTPUT_LIBRARY_SOURCE_FILES ${OUTPUT_FILES})
#MESSAGE(final=${OUTPUT_LIBRARY_SOURCE_FILES})



SET(PROJECT_SOURCE_FILES
main.cpp tetris.cpp
)
PREFIX_PATHS(${PROJECT_SRC} ${PROJECT_SOURCE_FILES})
SET(OUTPUT_PROJECT_SOURCE_FILES ${OUTPUT_FILES})
#MESSAGE(final=${OUTPUT_PROJECT_SOURCE_FILES})



#list all source files here
ADD_EXECUTABLE(${PROJECT_NAME} ${OUTPUT_PROJECT_SOURCE_FILES} ${OUTPUT_LIBRARY_SOURCE_FILES})



SET(LIBRARIES
  OpenGL
  SDL
  SDL_image
  SDL_ttf
)


# Some of the libraries have different names than their Find*.cmake name
SET(LIBRARIES_LINKED
  GL
  GLU
  SDL
  SDL_image
  SDL_ttf
)


FOREACH(LIBRARY_FILE ${LIBRARIES})
  Find_Package(${LIBRARY_FILE} REQUIRED)
ENDFOREACH(LIBRARY_FILE)

#need to link to some other libraries ? just add them here
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIBRARIES_LINKED})

